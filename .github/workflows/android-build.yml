name: Android Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
        else
          echo "version=1.0.0" >> $GITHUB_OUTPUT
          echo "No tag found, using default version: 1.0.0"
        fi
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Update package.json version
      working-directory: ./packages/android
      run: |
        npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version
      shell: bash

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install dependencies
      working-directory: ./packages/android
      run: npm install

    - name: Create metro config
      working-directory: ./packages/android
      run: |
        cat > metro.config.js << 'EOF'
        const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');
        const path = require('path');

        const config = {
          projectRoot: __dirname,
          watchFolders: [__dirname],
        };

        module.exports = mergeConfig(getDefaultConfig(__dirname), config);
        EOF
        echo "Metro config created"

    - name: Initialize Android project if needed
      working-directory: ./packages/android
      run: |
        if [ ! -d "android/app" ]; then
          echo "::notice::Android native project not found, initializing..."

          # Get React Native version from package.json
          RN_VERSION=$(node -p "require('./package.json').dependencies['react-native']")
          echo "Using React Native version: $RN_VERSION"

          # Initialize React Native project with specific version
          npx react-native@${RN_VERSION} init TorChatAndroid --skip-install --version ${RN_VERSION}

          # Move android directory to correct location
          mv TorChatAndroid/android .

          # Copy package.json to keep dependencies
          cp package.json android_package.json.bak

          # Clean up temporary files
          rm -rf TorChatAndroid

          # Restore package.json
          mv android_package.json.bak package.json

          echo "::notice::Android project initialized successfully"
        else
          echo "::notice::Android project already exists, proceeding with build..."
        fi

    - name: Create android assets directory and bundle JS
      working-directory: ./packages/android
      run: |
        mkdir -p android/app/src/main/assets
        echo "Android assets directory ready"

        # Bundle JavaScript and assets
        npx react-native bundle \
          --platform android \
          --dev false \
          --entry-file index.js \
          --bundle-output android/app/src/main/assets/index.android.bundle \
          --assets-dest android/app/src/main/res

        echo "JavaScript bundle created successfully"

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      working-directory: ./packages/android/android
      run: chmod +x gradlew

    - name: Build Debug APK
      working-directory: ./packages/android/android
      run: ./gradlew assembleDebug --stacktrace

    - name: Build Release APK
      working-directory: ./packages/android/android
      run: ./gradlew assembleRelease --stacktrace
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

    - name: List APK outputs
      run: |
        echo "Checking for APK files..."
        find packages/android/android/app/build/outputs/apk -name "*.apk" -type f || echo "No APK files found"

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: packages/android/android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: packages/android/android/app/build/outputs/apk/release/app-release*.apk
        retention-days: 30
        if-no-files-found: error

    - name: Verify APK exists for release
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        if [ ! -f packages/android/android/app/build/outputs/apk/release/app-release-unsigned.apk ] && [ ! -f packages/android/android/app/build/outputs/apk/release/app-release.apk ]; then
          echo "Error: Release APK not found!"
          ls -la packages/android/android/app/build/outputs/apk/release/ || true
          exit 1
        fi
        echo "Release APK found successfully"

    - name: Upload APK to Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packages/android/android/app/build/outputs/apk/release/app-release*.apk
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
